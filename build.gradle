import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id("com.bnorm.robocode") version "0.1.1"
    id 'jacoco'
}

group 'org.homework'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    implementation "org.slf4j:slf4j-api:2.0.0"
    implementation "org.slf4j:slf4j-simple:2.0.0"

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    implementation "org.nd4j:nd4j-native-platform:1.0.0-M1.1"
    implementation "org.nd4j:nd4j-native-platform:1.0.0-M1.1"

    annotationProcessor 'org.immutables:value:2.9.2'
    implementation 'org.immutables:value:2.9.2'

    // 1. Use Guava in your implementation only:
    implementation("com.google.guava:guava:31.1-jre")

    // 2. Use Guava types in your public API:
    api("com.google.guava:guava:31.1-jre")

    dependencies { testImplementation "org.mockito:mockito-core:3.+" }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}


tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

robocode {
    robots {
        register("AIRobot") {
            classPath = "org.homework.robot.AIRobot"
            version = "1.0"
            description = "Description"
        }
        register("NNRobot") {
            classPath = "org.homework.robot.NNRobot"
            version = "1.0"
            description = "Description"
        }
    }
}
